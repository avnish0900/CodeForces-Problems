#include<bits/stdc++.h>
using namespace std;
#define int              long long
#define all(xs)          xs.begin(), xs.end()
#define rall(xs)         xs.rbegin(), xs.rend()
#define sz(x)            (int)((x).size())
#define pb               push_back
#define ppb              pop_back
#define pf               push_front
#define ppf              pop_front
#define ff               first
#define ss               second
#define prec(n)          fixed<<setprecision(n)
#define debug(x)         cout << (#x) << " is " << (x) << "\n"
#define debug2(x, y)     cout << #x << "=" << x << "," << #y << "=" << y << "\n"
#define debug3(x, y,z)   cout << #x << "=" << x << "," << #y << "=" << y << "," << #z << "=" << z << "\n"
#define debug4(x, y,z,a) cout << #x << "=" << x << "," << #y << "=" << y << "," << #z << "=" << z <<" "<<#a << "=" << a << "\n"
#define yes              cout<<"YES";
#define no               cout<<"NO";
#define ll               cout<<"\n";
#define INF              2e18
int gcd(int A,int B){    return (B == 0) ? A : gcd(B, A % B);}
int lcm(int A,int B){    return A * B / gcd(A, B);}
// const int N=2e6+10;
// const int NN=1e9+10;
// const int mod = 1e9 + 7;
// const int alphasize = 26;

// struct node{
//     int count;
//     node* arr[alphasize];
// };

// node* getNode(){
//     node* n = new node;
//     n->count = 0;
//     for(int i=0; i<alphasize; i++){
//         n->arr[i] = NULL;
//     }
//     return n;
// }

// void insert(node* root, string str){
//     node* temp = root;
//     for(int i=0; i<str.length(); i++){
//         int index = str[i] - 'a';
//         if(temp->arr[index] == NULL){
//             temp->arr[index] = getNode();
//         }
//         temp=temp->arr[i];
//         temp->count++;
//     }
// }

// int getPrefixCount(node* root, string str){
//     node* temp = root;
//     for(int i=0; i<str.length(); i++){
//         int index = str[i] - 'a';
//         if(temp->arr[index] == NULL){
//             return 0;
//         }
//         temp=temp->arr[index];
//     }
//     return temp->count;
// }


// // for mod inverse calculate bexp(num, mod-2, mod);
// int bmul(int a, int b){
//     int ans = 0;
//     while(b>0){
//         if(b & 1){
//             ans = (ans + a)%mod;
//         }
//         a = (a + a) % mod;
//         b >>= 1;
//     }
//     return ans;
// }


// int bexpo(int a, int b){
//     int ans = 1;
//     while(b){
//         if(b & 1){
//             ans = bmul(ans, a);
//         }
//         a = bmul(a, a);
//         b >>= 1;
//     }
//     return ans;
// }
// int hp[N+10];
// int factormultiple[N+10];
// void precompute(){
//     for(int i=2; i<N; i++){
//         if(hp[i] == 0){
//             for(int j=i; j<N; j+=i){
//                 hp[j] = i;
//             }
//         }
//     }
// }

// vector<int> distinctpf(int num){
//     vector<int> ans;
//     while(num > 1){
//         int val = hp[num];
//         while(num%val == 0){
//             num /= val;
//         }
//         ans.pb(val);
//     }
//     return ans;
// }
// int hsh[N];
// int dpstr[N];
// int inv[N];
// int gethash(string str){
//     int power = 1;
//     int val = 0;
//     int p = 31;
//     for(char ch: str){
//         val = (val + (ch - 'a' + 1)*power) % mod;
//         power = (power * p) % mod;
//     }
//     return val;
// }

// void computehash(string str){
//     int p = 31; 
//     int power = 1;
//     inv[0] = 1;
//     dpstr[0] = (str[0] - 'a' + 1);
//     for(int i=1; i<str.length(); i++){
//         int ch = str[i];
//         power = (power * p)%mod;
//         inv[i] = bexpo(power, mod-2);
//         dpstr[i] = (dpstr[i-1] + (ch - 'a' + 1)*power) % mod;
//     }
// }

// int substringhsh(int l, int r){
//     int ans = dpstr[r];
//     if(l > 0){
//         ans = (ans - dpstr[l-1] + mod) % mod;
//         ans = (ans * inv[l]) % mod;
//     }
//     return ans;
// }
// int trie[1000001][26];
// int endNode[1000001];
// int counter = 0;

// void insert(string str){
//     int cur = 0;
//     for(char ch: str){
//         if(trie[cur][ch - 'a'] == 0){
//             counter++;
//             trie[cur][ch - 'a'] = counter;
//         }
//         cur = trie[cur][ch - 'a'];
//     }
//     endNode[cur] = 1;
// }
// ==========================================================================
// ==========================================================================



void solve(){
    int n; cin >> n;
    int k; cin >> k;
    char arr[n][n];
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            arr[i][j] = '.';
        }
    }
    int done = 0;
    int index = 0;
    int col=-1;
    int row=-1;
    for(int i=0; i<n; i+=2){
        if(done == k or index >= n){
            break;
        }
        row = i;
        col=index;
        arr[i][index] = 'R';
        index+=2;
        done++;
    }
    // debug3(row, col, done);
    if(done == k){
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                cout<<arr[i][j];
            }
            ll;
        }
        return;
    }
    // int pos = 1;
    // if(row < n-1){
    //     for(int i=n-1; i>=0; i-=2){
    //         if(done == k or ((!(i <= row)) and (!(pos+2 <= index)))){
    //             break;
    //         }
    //         arr[i][pos] = 'R';
    //         pos+=2;
    //         done++;
    //     }
    // }
    // // debug3(row, col, done);
    // if(done == k){
    //     for(int i=0; i<n; i++){
    //         for(int j=0; j<n; j++){
    //             cout<<arr[i][j];
    //         }
    //         ll;
    //     }
    //     return;
    // }
    cout<<-1;ll;
    return;
}

signed main(){
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(false), cin.tie(NULL);
    int t=1;
    // memset(hp, 0, sizeof hp); memset(hsh, 0, sizeof hp); memset(factormultiple, 0, sizeof hp);
    // precompute();
    cin>>t;
    for(int i=0;i<t;i++){
        // cout<<"Case #"<<i+1<<": "; 
       solve();
    }
}
